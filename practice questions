Q1] how would you detect the a cycle in a single llinked list write algo for this cycle detection?
--> Cycle detection in a singly linked list can be efficiently implemented using Floyd’s Cycle Detection Algorithm, also known as the Tortoise and Hare Algorithm. This algorithm uses two pointers that traverse the list at different speeds. Here's how it works:

Tortoise pointer (slow pointer) moves one step at a time.
Hare pointer (fast pointer) moves two steps at a time.
If there is a cycle in the list, the fast pointer will eventually meet the slow pointer within the cycle. If there is no cycle, the fast pointer will reach the end of the list (i.e., null).

Algorithm:
1.Initialize two pointers, slow and fast, both pointing to the head of the list.
2.Move slow by one step and fast by two steps.
3.If at any point, slow and fast meet, there is a cycle in the list.
4.If fast reaches the end (i.e., fast or fast.next becomes null), there is no cycle in the list.

Q2] How Do We Remove Duplicates? in single linked lsit 
--> There are two main ways to remove duplicates from a linked list:

1. Using Extra Space (HashSet):
3] -> [5] -> [7] -> [3] -> [9]
Start at the first node (3) and add 3 to our hash set.
Move to the next node (5) and add 5 to the hash set.
Move to the next node (7) and add 7 to the hash set.
Move to the next node (3), but 3 is already in the hash set (it’s a duplicate!). So, we remove this node and link the previous node to the next one (9).
After removing the duplicate, the list looks like this:
[3] -> [5] -> [7] -> [9]

2. Without Extra Space (Two Pointers):
Start at the first node in the list (let’s call this node current).
For each current node, use another pointer (called runner) to check all the nodes that come after current:
Compare current with runner:
If runner finds a node with the same value as current, remove that node (because it's a duplicate).
Otherwise, move runner to the next node.
Move current to the next node and repeat the process.
[3] -> [5] -> [7] -> [3] -> [9]
Start with current at the first node (3).
Use runner to check the nodes after 3. When runner gets to the second 3, it’s a duplicate! So, we remove it.
Now, move current to 5 and repeat the process, checking the remaining nodes for duplicates.
By the end, you will have removed all duplicates, just like in the first method:
[3] -> [5] -> [7] -> [9]
